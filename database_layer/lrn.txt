if not isinstance(candidate, dict):
    self.logger.log(
        component='create_candidate',
        message=f'expected dict argument got {type(candidate).__name__}',
        level='error'
    )
    raise UnsupportedDataType(expected='dict', got=type(candidate).__name__)

required_keys = {'username', 'email', 'password', 'first_name',
                 'last_name', 'degree', 'branch', 'cgpa'}
missing_arguments = required_keys - candidate.keys()
extra_keys = candidate.keys() - required_keys
if missing_arguments:
    self.logger.log(
        component='create_candidate',
        message='expected keys in argument candidate is not found',
        level='error'
    )
    raise UnsupportedDataValue(message='expected keys not provided in dict argument')
if extra_keys:
    self.logger.log(
        component='create_candidate',
        message='more keys are given in argument candidate then expected',
        level='warning'
    )




-------------------------------------------------------------------------------------------------------------------



    username: str = candidate.get('username')
        added_user = self.db.query(models.User).filter(models.User.username == username).first()
        if added_user is None:
            raise DataNotInsertedException

        added_user = dict(username=added_user.username,
                          email=added_user.email)
        return added_user



--------------------------------------------------------------------------------------------------------------------

class User(Base):
    __tablename__ = 'user'

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, nullable=False)
    email = Column(String, unique=True, nullable=False)
    hashed_password = Column(String, nullable=False)
    first_name = Column(String, nullable=False)
    last_name = Column(String)
    approval_status = Column(String, default='pending')
    role = Column(String, nullable=False)
    asked_question = relationship('Question',
                                  foreign_keys='Question.questioner_id',
                                  back_populates='questioner')
    answered_question = relationship('Question',
                                     foreign_keys='Question.answerer_id',
                                     back_populates='answerer')

class Question(Base):
    __tablename__ = 'question'

    id = Column(Integer, primary_key=True, index=True)
    questioner_id = Column(Integer, ForeignKey('user.id'), nullable=False)
    question = Column(String, nullable=False)
    answerer_id = Column(Integer, ForeignKey('user.id'))
    answer = Column(String)

    questioner = relationship('User',
                              foreign_keys=[questioner_id],
                              back_populates='asked_question')
    answerer = relationship('User',
                            foreign_keys=[answerer_id],
                            back_populates='answered_question')



------------------------------------------------------------------------------------------------------------------


message_orm_objects = (
            self.db.query(models.MassMessageReceiver)
            .join(models.MassMessage, models.MassMessage.id == models.MassMessageReceiver.mass_message_id)
            .order_by(desc(models.MassMessageReceiver.message.sent_at))
            .filter(models.MassMessageReceiver.receiver_id == self.user_id)
            .offset(offset_count)
            .limit(limit_count)
            .all()
        )

-----------------------------------------------------------------------------------------------------------------

class QuestionData(BaseModel):
    id: int = Field(gt=0, le=10**10)
    questioner_id: int = Field(gt=0, le=10**10)
    asked_at: str = Field(min_length=1, max_length=100)
    question: str = Field(min_length=1, max_length=10**4)
    response_status: str = Field(min_length=1, max_length=100)
    answerer_id: int = Field(gt=0, le=10**10)
    answered_at: str = Field(min_length=1, max_length=100)
    answer: str = Field(min_length=1, max_length=10**4)

---------------------------------------------------------------------------------------------------------------


from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.types import ASGIApp
from starlette import status
from api.routes.authentication import SECRET_KEY, ALGORITHM
from jose import jwt, JWTError


class RoleAuthorizationMiddleware(BaseHTTPMiddleware):
    def __init__(self, app: ASGIApp):
        super().__init__(app)

    async def dispatch(self, request: Request, call_next):
        try:
            path = request.url.path
            if path.startswith('/admin'):
                user = RoleAuthorizationMiddleware.get_user(request, 'admin')
                request.state.user_id = user.get('user_id')
            elif path.startswith('/candidate'):
                user = RoleAuthorizationMiddleware.get_user(request, 'candidate')
                request.state.user_id = user.get('user_id')
            elif path.startswith('/job'):
                user = RoleAuthorizationMiddleware.get_user(request, 'placement officer')
                request.state.user_id = user.get('user_id')
        except HTTPException as exception:
            return JSONResponse(
                status_code=exception.status_code,
                content={"detail": exception.detail}
            )

        response = await call_next(request)
        return response

    @staticmethod
    def get_user(request: Request, expected_role: str):
        auth_header = request.headers.get('Authorization')
        if auth_header is None or not auth_header.startswith('Bearer '):
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
                                detail='Authorization header is missing')

        token = auth_header[len('Bearer '):]
        try:
            payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM)
            username: str = payload.get('sub')
            user_id: int = payload.get('id')
            role: str = payload.get('role')
            approval_status: str = payload.get('approval_status')
            if (
                    username is None or user_id is None
                    or role is None or approval_status is None
                    or approval_status != 'approved'
                    or role != expected_role
            ):
                raise HTTPException(status_code=403, detail="You are not authorized to access this resource")
        except JWTError:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
                                detail='could not validate user')
        else:
            return dict(
                username=username,
                user_id=user_id,
                role=role
            )



